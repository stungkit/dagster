import os
from pathlib import Path

from dagster_dbt import DbtArtifacts

# This class helps us manage expectations that
# * If using `dagster dev` (or set the environment variable DAGSTER_DBT_PARSE_PROJECT_ON_LOAD) compile the manifest on load.
# * If not expect the manifest.json to already be prepared. This can be done by running this file as a script.
dbt_artifacts = DbtArtifacts(
    project_dir = Path(__file__).joinpath({{ dbt_project_dir_relative_path_parts | join(', ')}}).resolve(),
{% if package_data_dir_relative_parts -%}
    # For deployment scenarios like using pex, we need the dbt project to be installed as package data
    # which this class helps manage for us, copying over the directory as part of `prepare`.
    # For details, see https://docs.python.org/3/distutils/setupscript.html#installing-package-data.
    package_data_dir = Path(__file__).joinpath({{ package_data_dir_relative_parts | join(', ')}}).resolve(),
{% endif -%}
)

if __name__ == "__main__":
    # Run this file as a script as part of deployment process to prepare manifest
    dbt_artifacts.prepare()
